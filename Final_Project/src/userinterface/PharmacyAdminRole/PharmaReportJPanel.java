/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PharmacyAdminRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.LabEnterprise;
import Business.Enterprise.PharmacyEnterprise;
import Business.Essentials.Medicine;
import Business.Organization.PharmacyOrganization;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabPatientWorkRequest;
import Business.WorkQueue.PharmaWorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javafx.scene.chart.CategoryAxis;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Manasa
 */
public class PharmaReportJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PharmaReportJPanel
     */
    JPanel userProcessContainer;
    Enterprise enterprise;
    EcoSystem business;
    PharmacyOrganization organization;
    public PharmaReportJPanel(JPanel userProcessContainer, Enterprise enterprise,EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.business = business;
        this.organization = organization;
        populateCovidCases(); //covid medicine number of requests - each req display
        populateAgeGroup();//age group pie chart
        populateMedicineGraph();//medicine number of buyers
        populateNewMedList();//newly approved
        populateConditionDemand(); //condition pie chart
        populateConditionMedDemands(); //For each condtion medicine more of demand
        

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void populateCovidCases(){
        Map<String,Integer> covMed = new HashMap<String,Integer>();
        PharmacyEnterprise pharmaEnterprise = (PharmacyEnterprise) enterprise;
        for(Medicine med : pharmaEnterprise.getMedicineCatalog().getMedicineList()){
            int medCount =0;
            if(med.getCondition().equalsIgnoreCase("covid")){
                for(PharmaWorkRequest request: business.getPharmaQueue().getPharmaList()){
                    Map<Medicine,Integer> medMap = request.getMedList();
                    for (Map.Entry<Medicine,Integer> medicine : medMap.entrySet()) {
                         if(medicine.getKey().getName().equals(med.getName())){
                             medCount+=medicine.getValue();
                         }
                    } 
                }
                covMed.put(med.getName(), medCount);
            }
        }
        DefaultTableModel model = (DefaultTableModel)covidTable.getModel();
        model.setRowCount(0);
         for (Map.Entry<String,Integer> medEntry : covMed.entrySet()) {   
               Object row[] = new Object[8];
                 row[0] = medEntry.getKey();
                 row[1] = medEntry.getValue();
                   model.addRow(row); 
            }
    }   
    
    public Comparator<Medicine> dateComparator = (Medicine o1, Medicine o2) -> o2.getCreateDate().compareTo(o1.getCreateDate());
    public void populateNewMedList(){
        DefaultTableModel model = (DefaultTableModel)newTable.getModel();
        model.setRowCount(0);
        PharmacyEnterprise pharmaEnterprise = (PharmacyEnterprise) enterprise;
         Collections.sort(pharmaEnterprise.getMedicineCatalog().getMedicineList(),dateComparator);

          for(Medicine med : pharmaEnterprise.getMedicineCatalog().getMedicineList()){
                 Object row[] = new Object[8];
                 row[0] = med.getName();
                 row[1] = med.getCondition();
                 row[2] = med.getCreateDate();
                   model.addRow(row); 
          }      
    }   
    public void populateAgeGroup(){
        int count1to15 = 0;
        int count16to30=0;
        int count31to45=0;
        int count46to60=0;
        int count61to75=0;
        int count76to90=0;
        int count90toAbove=0;
        
        for(PharmaWorkRequest request : business.getPharmaQueue().getPharmaList()){
            int age = 0;
           for(Patient p: business.getPatientDirectory().getpatientlist()){
               if(p.getUserAccount().equals(request.getCust().getUsername())){
                   age = p.getAge();
               }
           }
            if(age > 0){
            if((age >= 1) &&(age <= 15)) {
                ++count1to15;
            }
            if((age >= 16) &&(age <= 30)) {
                ++count16to30;
            }
            if((age >= 31) &&(age <= 46)) {
                ++count31to45;
            }
            if((age >= 47) &&(age <= 60)) {
                ++count46to60;
            }
            if((age >= 61) &&(age <= 75)) {
                ++count61to75;
            }
            if((age >= 76) &&(age <= 90)) {
                ++count76to90;
            }else{
                ++count90toAbove;
            }
            }
        }
        

        DefaultPieDataset piedataset= new DefaultPieDataset();
        piedataset.setValue("1-15", count1to15);
        piedataset.setValue("16-30",count16to30 );
        piedataset.setValue("31-45",count31to45);
        piedataset.setValue("46-60",count46to60);
        piedataset.setValue("61-75",count61to75);
        piedataset.setValue("76-90",count76to90);
        piedataset.setValue("90-Above",count90toAbove);
        JFreeChart chart=ChartFactory.createPieChart("Pharmacy Age-Group Chart", piedataset, true, true, true);
        PiePlot p=(PiePlot)chart.getPlot();
       
        ChartFrame frame=new ChartFrame("Age-Group Pie Chart", chart);
       
   //     ageGroupPanel.setLayout(new java.awt.BorderLayout());
     //   ageGroupPanel.add(new ChartPanel(chart));
       // ageGroupPanel.setPreferredSize(new Dimension(300,300));
}
    public void populateMedicineGraph(){
    DefaultCategoryDataset category = new DefaultCategoryDataset();
    PharmacyEnterprise e = (PharmacyEnterprise) enterprise;
    for(Medicine medicine: e.getMedicineCatalog().getMedicineList()){
        int count = 0;
        for(PharmaWorkRequest req: business.getPharmaQueue().getPharmaList()){
                    Map<Medicine,Integer> medMap = req.getMedList();
                    for (Map.Entry<Medicine,Integer> med : medMap.entrySet()) {
                         if(med.getKey().getName().equals(medicine.getName())){
                             count+=med.getValue();
                         }
                    } 
                }
                category.setValue(count, "MedicineRequests", medicine.getName());
        }

   
       JFreeChart chart=ChartFactory.createBarChart("Medicine Demand Chart", "Medicine", "MedicineRequests", category, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p= (CategoryPlot)chart.getPlot();
        p.setRangeGridlinePaint(Color.BLUE);
        ChartFrame frame=new ChartFrame("Medicine Demand Chart", chart);
        
  //      demandPanel.setLayout(new java.awt.BorderLayout());
    //    demandPanel.add(new ChartPanel(chart));
      //  demandPanel.setPreferredSize(new Dimension(300,300));
    
}
   public void populateConditionMedDemands(){
    DefaultCategoryDataset category = new DefaultCategoryDataset();
    PharmacyEnterprise e = (PharmacyEnterprise) enterprise;
    for(Medicine medicine: e.getMedicineCatalog().getMedicineList()){
        int count = 0;
        for(PharmaWorkRequest req: business.getPharmaQueue().getPharmaList()){
                    Map<Medicine,Integer> medMap = req.getMedList();
                    for (Map.Entry<Medicine,Integer> med : medMap.entrySet()) {
                         if(med.getKey().getName().equals(medicine.getName())){
                             count+=med.getValue();
                         }
                    } 
                }
                category.addValue(count, medicine.getName(), medicine.getCondition());
        }
    
    
    


   
       JFreeChart chart=ChartFactory.createBarChart("Medicine Demand Chart", "Medicine", "MedicineRequests", category, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p= (CategoryPlot)chart.getPlot();
        p.setRangeGridlinePaint(Color.BLUE);
        ChartFrame frame=new ChartFrame("Medicine Demand Chart", chart);
        
        medDemandPanel.setLayout(new java.awt.BorderLayout());
        medDemandPanel.add(new ChartPanel(chart));
        medDemandPanel.setPreferredSize(new Dimension(610,400));
    
}
    public void populateConditionDemand(){
               int diabetesCount = 0;
        int covidCount=0;
        int heartCount=0;
        int respCount=0;
        int feverCount=0;
        int entCount=0;
        int painCount=0;
    PharmacyEnterprise e = (PharmacyEnterprise) enterprise;
    for(PharmaWorkRequest req: business.getPharmaQueue().getPharmaList()){
                    Map<Medicine,Integer> medMap = req.getMedList();
                    for (Map.Entry<Medicine,Integer> med : medMap.entrySet()) {
                         if(med.getKey().getCondition().equalsIgnoreCase("Covid")){
                             covidCount+=med.getValue();
                         }else if(med.getKey().getCondition().equalsIgnoreCase("Heart")){
                             heartCount+=med.getValue();
                         }else if(med.getKey().getCondition().equalsIgnoreCase("Resp")){
                             respCount+=med.getValue();
                         }else if(med.getKey().getCondition().equalsIgnoreCase("Fever")){
                             feverCount+=med.getValue();
                         }else if(med.getKey().getCondition().equalsIgnoreCase("Ent")){
                             entCount+=med.getValue();
                         }else if(med.getKey().getCondition().equalsIgnoreCase("Pain")){
                             painCount+=med.getValue();
                         }else if(med.getKey().getCondition().equalsIgnoreCase("Diabetes")){
                             diabetesCount+=med.getValue();
                         }
                    } 
    }

        DefaultPieDataset piedataset= new DefaultPieDataset();
        piedataset.setValue("Covid-Relief", covidCount);
        piedataset.setValue("Heart Problems",heartCount);
        piedataset.setValue("Diabetes",diabetesCount);
        piedataset.setValue("Respiratory Problems",respCount);
        piedataset.setValue("EnT Medicines",entCount);
        piedataset.setValue("Fever",feverCount);
        piedataset.setValue("PainKillers",painCount);        
        JFreeChart chart=ChartFactory.createPieChart("Medicine Type Chart", piedataset, true, true, true);
        PiePlot p=(PiePlot)chart.getPlot();
        ChartFrame frame=new ChartFrame("Medicine Type Chart", chart);
    //    conditionPanel.setLayout(new java.awt.BorderLayout());
      //  conditionPanel.add(new ChartPanel(chart));
       // conditionPanel.setPreferredSize(new Dimension(300,300));
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnRec = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        covidTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        newTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        medDemandPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();

        jLabel1.setText("PharmacyReport");

        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnRec.setText("Pharmacy Records");
        btnRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecActionPerformed(evt);
            }
        });

        covidTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Medicine", "Requests"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(covidTable);
        if (covidTable.getColumnModel().getColumnCount() > 0) {
            covidTable.getColumnModel().getColumn(0).setResizable(false);
            covidTable.getColumnModel().getColumn(1).setResizable(false);
            covidTable.getColumnModel().getColumn(1).setHeaderValue("Requests");
        }

        jLabel2.setText("Covid Medicine Requests");

        newTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Medicine", "Condition", "CreateDate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(newTable);
        if (newTable.getColumnModel().getColumnCount() > 0) {
            newTable.getColumnModel().getColumn(0).setResizable(false);
            newTable.getColumnModel().getColumn(1).setResizable(false);
            newTable.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel3.setText("Newly Added Medicines");

        medDemandPanel.setBackground(new java.awt.Color(255, 204, 204));

        jLabel11.setText("Age-Group");

        javax.swing.GroupLayout medDemandPanelLayout = new javax.swing.GroupLayout(medDemandPanel);
        medDemandPanel.setLayout(medDemandPanelLayout);
        medDemandPanelLayout.setHorizontalGroup(
            medDemandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(medDemandPanelLayout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(jLabel11)
                .addContainerGap(893, Short.MAX_VALUE))
        );
        medDemandPanelLayout.setVerticalGroup(
            medDemandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(medDemandPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addContainerGap(490, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(201, 201, 201)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRec))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 937, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(medDemandPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRec, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBack)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(medDemandPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(200, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecActionPerformed
        // TODO add your handling code here:
                        PharmaRecordJPanel pharmaRedJPanel=new PharmaRecordJPanel(userProcessContainer,enterprise,business);
        userProcessContainer.add("pharmaRedJPanel",pharmaRedJPanel);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnRecActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRec;
    private javax.swing.JTable covidTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel medDemandPanel;
    private javax.swing.JTable newTable;
    // End of variables declaration//GEN-END:variables
}
