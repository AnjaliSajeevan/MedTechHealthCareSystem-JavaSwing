/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.VaccineAdminRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.VaccineCompanyOrganization;
import Business.UserAccount.UserAccount;
import javax.swing.JPanel;
import Business.Vaccine.Vaccine;
import Business.Vaccine.VaccineTester;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.VaccineWorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.VaccineScientistRole.ViewVaccineJPanel;

/**
 *
 * @author Manasa
 */
public class VaccineRequestJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount account;
    private EcoSystem business; 
    private Enterprise enterprise;
    private Organization organization;
    private int testerNum;
    public VaccineRequestJPanel(JPanel userProcessContainer, UserAccount account,Organization organization,Enterprise enterprise,EcoSystem business ) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        this.enterprise = enterprise;
        this.organization = organization;
        this.account= account;
        this.testerNum = 0;
        populateStaffBox();
        populateDrugRequestTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
      public void populateDrugRequestTable(){
             DefaultTableModel model = (DefaultTableModel)vaccineRequestTable.getModel();
        model.setRowCount(0);
        List<VaccineWorkRequest> requestList = account.getVaccineWorkQueue().getVaccineRequestList();
        for(VaccineWorkRequest req: requestList){
                    Map<String,Date> map = req.getStatusMap();
                    String latestKey = "";
            for (Map.Entry<String,Date> mapEntry : req.getStatusMap().entrySet()) {  
                if(latestKey.equals("")){
            latestKey = mapEntry.getKey();
                }
                if((map.get(latestKey).compareTo(map.get(mapEntry.getKey()))) < 0){
                    latestKey = mapEntry.getKey();
                }
               }
            if(latestKey.equals("Pending Approval")){
            Object row[] = new Object[8];
                 row[0] = req;
                 row[1] = req.getVaccine().getName();
                 row[2] = req.getVaccine().getCondition();
                 row[3] = req.getRequestDate();
            
            if(req.getSender() == null){
                 row[4] = "";
            }else{
                 row[4] = req.getSender();
            }

   
                 row[5] = latestKey;
            

            
            model.addRow(row); 
            }
        }
    }
   public void populateTesterTable(){
                DefaultTableModel model = (DefaultTableModel)testorsTable.getModel();
        model.setRowCount(0);

        List<VaccineTester> vaccinetestList = business.getVaccinetesterDirectory().getVaccineTesterList();
        for(VaccineTester tester: vaccinetestList){
            Object row[] = new Object[4];
                 row[0] = tester.getId();
                 row[1] = tester;
                 row[2] = tester.getCondition();
                 row[3] = tester.getAge();        
                 
            model.addRow(row);                    
        }
                if(testerNum > 0){
               //     testorsTable.setRowSelectionAllowed(true);;
        if(business.getVaccinetesterDirectory().getVaccineTesterList().size() <= testerNum){
            testorsTable.addRowSelectionInterval(1, business.getVaccinetesterDirectory().getVaccineTesterList().size()-1);
        }else{
        testorsTable.addRowSelectionInterval(1, testerNum);
        }
        }
        
            
    
    }
    public void populateLabTestTable(){
                       DefaultTableModel model = (DefaultTableModel)testRequestTable.getModel();
        model.setRowCount(0);

        for(LabTestWorkRequest labTest: account.getLabTestWorkQueue().getLabRequestList()){
            if(labTest.getResult().equals("LabTest Created")){
            Object row[] = new Object[8];
                 row[0] = labTest;
                 row[1] = labTest.getLabTestType();
                 row[2] = labTest.getVaccine();
                 row[3] =labTest.getTester();
                 row[4] = labTest.getLabTestType();
                 if(labTest.getUsername() == null){
                     row[5] = "";
                 }else{
                 row[5] = labTest.getUsername();
                 }
                 if(labTest.getResult() == null){
                     row[6] = "";
                 }else{
                 row[6] = labTest.getResult();
                 }
                 if(labTest.getMessage() == null){
                     row[7] = "";
                 }else{
                 row[7] = labTest.getMessage();
                 }
                 

                 
                 
            model.addRow(row);                    
        }
        }
    }
    public void populateStaffBox(){
        staffComboBox.removeAllItems();
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (UserAccount ua : organization.getUserAccountDirectory().getUserAccountList()) {
                if(ua.getRole().toString().equals("VaccineTestingStaff")){
                staffComboBox.addItem(ua);
                }
            }
        }
    }
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnSelectTester = new javax.swing.JButton();
        btnViewVaccine = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        testerSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        testorsTable = new javax.swing.JTable();
        btnViewTester = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnStaffAsgn = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnRouteBack = new javax.swing.JButton();
        routeMessage = new javax.swing.JTextField();
        staffComboBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        btnDeselect = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        testRequestTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        vaccineRequestTable = new javax.swing.JTable();

        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("Step 1: Select Request to Process and Number of Testers:");

        btnSelectTester.setText("Proceed For Testers Selection");
        btnSelectTester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectTesterActionPerformed(evt);
            }
        });

        btnViewVaccine.setText("View Vaccine");
        btnViewVaccine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewVaccineActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel2.setText("Step 2: Choose Testers:");

        jLabel3.setText("Number of Patients to be Tested");

        testorsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "TesterID", "Name", "Health Type", "Age"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(testorsTable);

        btnViewTester.setText("View Tester Details");
        btnViewTester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewTesterActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel4.setText("Step 3:Assign to Staff for Testing:");

        btnStaffAsgn.setText("Proceed For Staff Assignment");
        btnStaffAsgn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStaffAsgnActionPerformed(evt);
            }
        });

        jButton4.setText("Proceed with Testing");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel5.setText("Testing Staff:");

        btnRouteBack.setText("Route Back Request");
        btnRouteBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRouteBackActionPerformed(evt);
            }
        });

        staffComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel6.setText("New Vaccine Requests");

        btnDeselect.setText("Deselect All");
        btnDeselect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeselectActionPerformed(evt);
            }
        });

        testRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "TestID", "Type", "VaccineID", "TesterID", "TestingStaff", "Status", "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(testRequestTable);

        vaccineRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "VaccineID", "Name", "Type", "CreateDate", "Sender", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(vaccineRequestTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(169, 169, 169)
                .addComponent(jLabel6)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnViewTester)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnDeselect))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addGap(46, 46, 46)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(staffComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnViewVaccine, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(142, 142, 142)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(btnSelectTester, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabel3)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(testerSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                                .addGap(97, 97, 97)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnRouteBack)
                                                    .addComponent(routeMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(95, 95, 95))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(206, 206, 206)
                                .addComponent(btnStaffAsgn, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(184, 184, 184)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 724, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane4))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 745, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewVaccine)
                    .addComponent(routeMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(testerSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRouteBack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSelectTester, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(btnDeselect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnViewTester)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnStaffAsgn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(staffComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewTesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewTesterActionPerformed
        // TODO add your handling code here:
        int selectedRow = testorsTable.getSelectedRow();
        if(selectedRow<0 || selectedRow>1){
            JOptionPane.showMessageDialog(null, "Please select one Testor to view details!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        VaccineTester tester= (VaccineTester)testorsTable.getValueAt(selectedRow, 1);
        ViewTestersJPanel viewTestersJPanel = new ViewTestersJPanel(userProcessContainer, business,tester,false);
        userProcessContainer.add("viewTestersJPanel", viewTestersJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnViewTesterActionPerformed

    private void staffComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_staffComboBoxActionPerformed

    private void btnStaffAsgnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStaffAsgnActionPerformed
        // TODO add your handling code here:
         int selectedVacRow = vaccineRequestTable.getSelectedRow();
         VaccineWorkRequest vaccineReq= (VaccineWorkRequest)vaccineRequestTable.getValueAt(selectedVacRow, 0);
        int rows = testorsTable.getSelectedRowCount();
        if(rows < testerNum){
             JOptionPane.showMessageDialog(null, "Required "+testerNum+" testers!\nThe selected testers are less than required testers!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;           
        }
        int[] selectedRow = testorsTable.getSelectedRows();
        for(int i=0;i<selectedRow.length;i++){
            LabTestWorkRequest labReq = new LabTestWorkRequest();
                        labReq.setMessage("");
            VaccineTester vacTester= (VaccineTester)testorsTable.getValueAt(selectedRow[i], 1);
            labReq.setTester(vacTester);
            labReq.setResult("LabTest Created");
            labReq.setVaccine(vaccineReq.getVaccine());
            labReq.setLabTestType("Vaccine Test");
            account.getLabTestWorkQueue().addLabRequest(labReq);
        Map<String,Date> reqMap = vaccineReq.getStatusMap();
        reqMap.put("Selecting Vaccine Testers", new Date());
        vaccineReq.setStatusMap(reqMap);
        business.getVaccineQueue().updateWorkRequest(vaccineReq, business.getVaccineQueue().getVaccineRequestList());

            business.getLabQueue().addLabRequest(labReq);

        }
         populateLabTestTable();


    }//GEN-LAST:event_btnStaffAsgnActionPerformed

    private void btnDeselectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeselectActionPerformed
        // TODO add your handling code here:
        testorsTable.getSelectionModel().clearSelection();
    }//GEN-LAST:event_btnDeselectActionPerformed

    private void btnSelectTesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectTesterActionPerformed
        // TODO add your handling code here:
                  int selectedRow = vaccineRequestTable.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a Vaccine row!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        VaccineWorkRequest vaccineReq= (VaccineWorkRequest)vaccineRequestTable.getValueAt(selectedRow, 0);
        testerNum = (Integer)testerSpinner.getValue();
        if(testerNum <=0){
      JOptionPane.showMessageDialog(null, "Number of testers needs to be more than zero!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;    
        }
        populateTesterTable(); 
    }//GEN-LAST:event_btnSelectTesterActionPerformed

    private void btnRouteBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRouteBackActionPerformed
        // TODO add your handling code here:
       int row = vaccineRequestTable.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Please select a Vaccine row!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(routeMessage.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Route message is mandatory for sending back the request!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;            
        }
        
                 VaccineWorkRequest vacReq= (VaccineWorkRequest)vaccineRequestTable.getValueAt(row, 0);
        Map<String,Date> reqMap = vacReq.getStatusMap();
        reqMap.put("Reroute from Admin", new Date());
        vacReq.setStatusMap(reqMap);
        business.getVaccineQueue().updateWorkRequest(vacReq, business.getVaccineQueue().getVaccineRequestList());
         
        for (UserAccount userAccount:enterprise.getUserAccountDirectory().getUserAccountList()){
            if(userAccount.getUsername().equals(vacReq.getSender())){
                userAccount.getVaccineWorkQueue().addWorkRequest(vacReq);
                account.getVaccineWorkQueue().removeWorkRequest(vacReq);
        business.getVaccineQueue().updateWorkRequest(vacReq, business.getVaccineQueue().getVaccineRequestList());
        

                
            }
        }
        populateDrugRequestTable();
    }//GEN-LAST:event_btnRouteBackActionPerformed

    private void btnViewVaccineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewVaccineActionPerformed
        // TODO add your handling code here:
                  int selectedRow = vaccineRequestTable.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a Vaccine row!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        VaccineWorkRequest vaccineReq= (VaccineWorkRequest)vaccineRequestTable.getValueAt(selectedRow, 0);
          
        ViewVaccineJPanel viewVaccineJPanel=new ViewVaccineJPanel(userProcessContainer,account,business,vaccineReq.getVaccine(),false);
        userProcessContainer.add("viewVaccineJPanel",viewVaccineJPanel);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnViewVaccineActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
       
        if(staffComboBox.getSelectedItem().equals("")){
         JOptionPane.showMessageDialog(null, "Please select a Vaccine Testing staff!", "Warning", JOptionPane.WARNING_MESSAGE);       
                  return;
        }
        int selectedVacRow = vaccineRequestTable.getSelectedRow();
         VaccineWorkRequest vaccineReq= (VaccineWorkRequest)vaccineRequestTable.getValueAt(selectedVacRow, 0);
              for(LabTestWorkRequest labReq: account.getLabTestWorkQueue().getLabRequestList()){
                  if(labReq.getResult().equals("LabTest Created")){
                      if(labReq.getVaccine().getId() == vaccineReq.getVaccine().getId()){
                          labReq.setUsername(staffComboBox.getSelectedItem().toString());
                          labReq.setResult("Testing InProgress");
                                  for(Organization org:enterprise.getOrganizationDirectory().getOrganizationList()) {
            if(org.getName().equals("Vaccine Organization")){
                organization = org;
            }
        }

        for(UserAccount ua : organization.getUserAccountDirectory().getUserAccountList()){
            if(ua.getUsername().equals(staffComboBox.getSelectedItem().toString())){
                     ua.getLabTestWorkQueue().addLabRequest(labReq);
            }
        }
         
                          
                      }
                  }
                  business.getLabQueue().updateLabRequest(labReq, business.getLabQueue().getLabRequestList());
              }
                  account.getLabTestWorkQueue().getLabRequestList().clear();
                         
          
                  Map<String,Date> statusMap = vaccineReq.getStatusMap();
                          statusMap.put("Testing InProgress",new Date());
                          vaccineReq.setStatusMap(statusMap);
                              account.getVaccineWorkQueue().removeWorkRequest(vaccineReq);
        business.getVaccineQueue().updateWorkRequest(vaccineReq, business.getVaccineQueue().getVaccineRequestList());
        populateDrugRequestTable();
                    populateLabTestTable();
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeselect;
    private javax.swing.JButton btnRouteBack;
    private javax.swing.JButton btnSelectTester;
    private javax.swing.JButton btnStaffAsgn;
    private javax.swing.JButton btnViewTester;
    private javax.swing.JButton btnViewVaccine;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField routeMessage;
    private javax.swing.JComboBox staffComboBox;
    private javax.swing.JTable testRequestTable;
    private javax.swing.JSpinner testerSpinner;
    private javax.swing.JTable testorsTable;
    private javax.swing.JTable vaccineRequestTable;
    // End of variables declaration//GEN-END:variables
}
