/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.VaccineAdminRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.VaccineEnterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.Vaccine.Vaccine;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.VaccineWorkRequest;
import java.awt.CardLayout;
import static java.lang.Boolean.TRUE;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Manasa
 */
public class TestedRequestsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form TestedRequestsJPanel
     */
  private JPanel userProcessContainer;
    private UserAccount account;
    private EcoSystem business; 
    private Enterprise enterprise;
    public TestedRequestsJPanel(JPanel userProcessContainer, UserAccount account,Enterprise enterprise,EcoSystem business ) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.business = business;
        this.enterprise = enterprise;
        populateTestedTable("");
        populateVaccines();
        populateFDAEnterprises();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void populateTestedTable(String vac){
         DefaultTableModel model = (DefaultTableModel)testRequestTable.getModel();
        model.setRowCount(0);
       int testCount =0;
        for(LabTestWorkRequest labTest: account.getLabTestWorkQueue().getLabRequestList()){
            if(!labTest.isComplete()){
                                        Map<String,Date> map = labTest.getStatusMap();
                    String latestKey = "";
            for (Map.Entry<String,Date> mapEntry : labTest.getStatusMap().entrySet()) {  
                if(latestKey.equals("")){
            latestKey = mapEntry.getKey();
                }
                if((map.get(latestKey).compareTo(map.get(mapEntry.getKey()))) < 0){
                    latestKey = mapEntry.getKey();
                }
               }
            if((latestKey.equals("Success!") || (labTest.getResult().equals("Failure!")))){
                if(!vac.equals("")){
                    if(!labTest.getVaccine().toString().equals(vac)){
                        continue;                       
                    }else{
                        testCount+=1;
                    }
                }
            Object row[] = new Object[8];
                 row[0] = labTest;
                 row[1] = labTest.getLabTestType();
                 row[2] = labTest.getVaccine();
                 row[3] =labTest.getTester();
                 row[4] = labTest.getLabTestType();
                 if(labTest.getReceiver() == null){
                     row[5] = "";
                 }else{
                 row[5] = labTest.getReceiver();
                 }
                 if(labTest.getResult() == null){
                     row[6] = "";
                 }else{
                 row[6] = labTest.getResult();
                 }
                 if(labTest.getMessage() == null){
                     row[7] = "";
                 }else{
                 row[7] = labTest.getMessage();
                 }
                 

                 
                 
            model.addRow(row);                    
        }
            }
        }
        int allTest =0;
          if(!vac.equals("")){
              Vaccine newVac = (Vaccine)vaccinecomboBox.getSelectedItem();
              VaccineEnterprise vacEnterprise = (VaccineEnterprise) enterprise;
              for(Vaccine v : vacEnterprise.getVaccineDirectory().getVaccineList()){
                  if(v.getId()==newVac.getId()){
                     allTest = v.getTesterNum();
                  }
              }
           if(testCount < allTest){
                        JOptionPane.showMessageDialog(null, "Note: Complete Test Results not received yet!\nTotal Tests for this vaccine :"+allTest+"\nPending results for this vaccine :"+(allTest-testCount), "Warning", JOptionPane.WARNING_MESSAGE);       
           }
          }
        
        
    
    }
        public void populateVaccines(){   
            List<Vaccine> vacList = new ArrayList<Vaccine>();
        vaccinecomboBox.removeAllItems();
        vaccinecomboBox.addItem("");
        for(LabTestWorkRequest labReq:business.getLabQueue().getLabRequestList()){
            if(!labReq.getVaccine().isTested()){
                if(!vacList.contains(labReq.getVaccine())){
                    vacList.add(labReq.getVaccine());
                }
            }
        }
        for(Vaccine v:vacList){
        vaccinecomboBox.addItem(v);
        }
    }
        public void populateFDAEnterprises(){
                    fdaBox.removeAllItems();
                    fdaBox.addItem("");
          for (Network network : business.getNetworkList()){
        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
            String fdaReg = ".*Food and Drug Administration.*";
            Pattern pattern = Pattern.compile(fdaReg);
            Matcher check = pattern.matcher(enterprise.toString());
            boolean fdaMatch = check.matches();
            if(fdaMatch == TRUE){
            fdaBox.addItem(enterprise.toString());
            }
        }
        }

        

        
        }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        testRequestTable = new javax.swing.JTable();
        btnSearchByVaccine = new javax.swing.JButton();
        vaccinecomboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fdaBox = new javax.swing.JComboBox<>();
        txtResult = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnRoute = new javax.swing.JButton();
        btnFDA = new javax.swing.JButton();

        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jButton1.setText("Display All Results");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel6.setText("Tested Vaccine Requests");

        testRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "TestID", "Type", "VaccineID", "TesterID", "TestingStaff", "Status", "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(testRequestTable);

        btnSearchByVaccine.setText("Search All Results By VaccineID");
        btnSearchByVaccine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByVaccineActionPerformed(evt);
            }
        });

        vaccinecomboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vaccinecomboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Testing VaccineID:");

        jLabel2.setText("Select FDA:");

        fdaBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Message:");

        btnRoute.setText("Route Back to Scientist");
        btnRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRouteActionPerformed(evt);
            }
        });

        btnFDA.setText("Send for FDA Approval");
        btnFDA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFDAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(244, 244, 244)
                                .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addComponent(btnFDA, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(48, 48, 48)
                                        .addComponent(btnRoute, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fdaBox, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 27, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(vaccinecomboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addGap(103, 103, 103)))
                        .addComponent(btnSearchByVaccine))
                    .addComponent(jScrollPane5)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(1, 1, 1)))
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(vaccinecomboBox)
                            .addComponent(btnSearchByVaccine, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(59, 59, 59))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel3)
                        .addGap(1, 1, 1)
                        .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fdaBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRoute, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFDA, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        populateTestedTable("");
        populateVaccines();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnSearchByVaccineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByVaccineActionPerformed
        // TODO add your handling code here:
        if(vaccinecomboBox.getSelectedItem().equals("")){
            JOptionPane.showMessageDialog(null, "Please select a Vaccine ID!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        populateTestedTable(vaccinecomboBox.getSelectedItem().toString());
    }//GEN-LAST:event_btnSearchByVaccineActionPerformed

    private void vaccinecomboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vaccinecomboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vaccinecomboBoxActionPerformed

    private void btnRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRouteActionPerformed
        // TODO add your handling code here:
        if(txtResult.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Message is mandatory for routing!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(vaccinecomboBox.getSelectedItem().equals("")){
            JOptionPane.showMessageDialog(null, "Please select a Vaccine ID!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        VaccineWorkRequest request = null;
        for(VaccineWorkRequest vacReq: business.getVaccineQueue().getVaccineRequestList()){
            if(vacReq.getVaccine().toString().equals(vaccinecomboBox.getSelectedItem().toString())){
                Map<String,Date> reqMap = vacReq.getStatusMap();
                reqMap.put("TestComplete: "+txtResult.getText(), new Date());
                reqMap.put("Vaccine Work finished", new Date());
                vacReq.setStatusMap(reqMap);
                vacReq.setSender(account);
                vacReq.setReceiver(vacReq.getVaccine().getUsername());
                vacReq.setResolveDate(new Date());
                vacReq.setMessage(txtResult.getText());
                vacReq.setSuccess("drop");
                request = vacReq;
            }
        }

        if(request!=null){
            LabTestWorkRequest removeWork = null;
            for(LabTestWorkRequest work:account.getLabTestWorkQueue().getLabRequestList()){
                if(work.getVaccine().toString().equals(vaccinecomboBox.getSelectedItem().toString())){
                    removeWork = work;
                    work.setComplete(true);
                    work.getVaccine().setTested(true);
                    business.getLabQueue().updateLabRequest(work, business.getLabQueue().getLabRequestList());

                }
            }
            account.getLabTestWorkQueue().removeLabRequest(removeWork);
            business.getVaccineQueue().updateWorkRequest(request, business.getVaccineQueue().getVaccineRequestList());
        }
        JOptionPane.showMessageDialog(null, "Request Sent back to Research Scientist!!", "Information", JOptionPane.INFORMATION_MESSAGE);

        populateTestedTable("");
        populateVaccines();
        populateFDAEnterprises();
        txtResult.setText("");
    }//GEN-LAST:event_btnRouteActionPerformed

    private void btnFDAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFDAActionPerformed
        // TODO add your handling code here:
        if(txtResult.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Message is mandatory for proceeding to FDA!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(vaccinecomboBox.getSelectedItem().equals("")){
            JOptionPane.showMessageDialog(null, "Please select a Vaccine ID!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(fdaBox.getSelectedItem().equals("")){
            JOptionPane.showMessageDialog(null, "Please choose the FDA enterprise to send the request!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        VaccineWorkRequest request = null;
        for(VaccineWorkRequest vacReq: business.getVaccineQueue().getVaccineRequestList()){
            if(vacReq.getVaccine().toString().equals(vaccinecomboBox.getSelectedItem().toString())){
                Map<String,Date> reqMap = vacReq.getStatusMap();
                reqMap.put("TestComplete: "+txtResult.getText(), new Date());
                vacReq.setStatusMap(reqMap);
                vacReq.setSender(account);
                vacReq.setMessage(txtResult.getText());
                request = vacReq;
            }
        }
        if(request!=null){
            for(LabTestWorkRequest work:account.getLabTestWorkQueue().getLabRequestList()){
                if(work.getVaccine().toString().equals(vaccinecomboBox.getSelectedItem().toString())){
                    work.setComplete(true);
                    work.getVaccine().setTested(true);
                    business.getLabQueue().updateLabRequest(work, business.getLabQueue().getLabRequestList());
                    // account.getLabTestWorkQueue().removeLabRequest(work);
                }
            }
            Map<String,Date> reqMap = request.getStatusMap();
            reqMap.put("Sent to FDA: "+fdaBox.getSelectedItem().toString(), new Date());
            request.setStatusMap(reqMap);
            request.setPhase("approval");
            request.setSender(account);
            for (Network network : business.getNetworkList()){
                for (Enterprise enterpriseCheck : network.getEnterpriseDirectory().getEnterpriseList()){
                    if(enterpriseCheck.getName().equals(fdaBox.getSelectedItem().toString())){
                        for (UserAccount ua : enterpriseCheck.getUserAccountDirectory().getUserAccountList()) {
                            if(ua.getRole().toString().equals("FDAAdmin")){
                                request.setReceiver(ua);
                                ua.getVaccineWorkQueue().addWorkRequest(request);
                            }
                        }

                    }
                }
            }
            business.getVaccineQueue().updateWorkRequest(request, business.getVaccineQueue().getVaccineRequestList());
        }
        JOptionPane.showMessageDialog(null, "Request Sent to FDA!!", "Information", JOptionPane.INFORMATION_MESSAGE);
        populateTestedTable("");
        populateVaccines();
        populateFDAEnterprises();
        txtResult.setText("");
    }//GEN-LAST:event_btnFDAActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnFDA;
    private javax.swing.JButton btnRoute;
    private javax.swing.JButton btnSearchByVaccine;
    private javax.swing.JComboBox<String> fdaBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable testRequestTable;
    private javax.swing.JTextField txtResult;
    private javax.swing.JComboBox vaccinecomboBox;
    // End of variables declaration//GEN-END:variables
}
