/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PatientRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.LabEnterprise;
import Business.Essentials.Medicine;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabPatientWorkRequest;
import Business.WorkQueue.PharmaWorkRequest;
import Business.WorkQueue.LabPatientWorkQueue;
import java.awt.CardLayout;
import static java.lang.Boolean.FALSE;
import static java.lang.Boolean.TRUE;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Manasa
 */
public class BookLabJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BookLabJPanel
     */
    JPanel userProcessContainer;
    Enterprise enterprise;
    EcoSystem business;
    UserAccount account;
    public BookLabJPanel(JPanel userProcessContainer, UserAccount account,Enterprise enterprise,EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.account = account;
        this.business = business;
        populateLabs();
    }
    public void populateLabs(){
        labComboBox.removeAllItems();
        for (Network network : business.getNetworkList()){
        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
        String pwdRegex = ".*Laboratory.*";
            Pattern pwdPattern = Pattern.compile(pwdRegex);
            Matcher pwdCheck = pwdPattern.matcher(enterprise.toString());
            boolean checkPwd = pwdCheck.matches();
            if(checkPwd == TRUE){
                labComboBox.addItem(enterprise.toString());      
        }
        }
        }
    }
    public void populateServices(LabEnterprise e){
                serviceComboBox.removeAllItems();
      List<String> services = e.getServices();
         for(String service : services){
          serviceComboBox.addItem(service);
         }
    }
        public void populateSlots(LabEnterprise e){
        DefaultTableModel model = (DefaultTableModel)slotTable.getModel();
        model.setRowCount(0);
      Map<String,String> slots = e.getTimeSlot();
            for (Map.Entry<String,String> slot : slots.entrySet()) {  
                if(slot.getValue().equals("false")){
                    Object[] row = new Object[5];
                    String [] slotDet =  slot.getKey().split(",");
                    row[0] = slotDet[0];
                    row[1] = slotDet[1];

                    model.addRow(row);    
                }
         }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        labComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        slotTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        serviceComboBox = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        btnBook = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        jLabel1.setText("Lab Appointment Booking");

        btnBack.setText("<-Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        labComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setText("Select Laboratory");

        slotTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Day", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(slotTable);
        if (slotTable.getColumnModel().getColumnCount() > 0) {
            slotTable.getColumnModel().getColumn(0).setResizable(false);
            slotTable.getColumnModel().getColumn(1).setResizable(false);
        }

        jButton1.setText("View Services and Available Slots");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Showing Next Week Available Slots:");

        serviceComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText("Choose Service:");

        btnBook.setText("BOOK LAB APPOINTMENT");
        btnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookActionPerformed(evt);
            }
        });

        jSeparator1.setBackground(new java.awt.Color(102, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(142, 142, 142)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(153, 153, 153)
                                .addComponent(jLabel6)
                                .addGap(26, 26, 26)
                                .addComponent(serviceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(232, 232, 232)
                                .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 612, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(235, 235, 235)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(66, 66, 66)
                                .addComponent(jButton1)))
                        .addGap(0, 88, Short.MAX_VALUE))
                    .addComponent(jSeparator1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(labComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serviceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookActionPerformed
        // TODO add your handling code here:
        if(serviceComboBox.getSelectedItem().equals("")){
         JOptionPane.showMessageDialog(null, "Service Selection is mandatory!", "Warning", JOptionPane.WARNING_MESSAGE);       
                  return;
        }
       int rows = slotTable.getSelectedRowCount();
        if(rows <= 0){
             JOptionPane.showMessageDialog(null,"Selecting one time slot is mandatory!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;           
        }  
        if(rows >1){
             JOptionPane.showMessageDialog(null,"Please select only one slot!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;               
        }
        String slotDate = (String) slotTable.getValueAt(rows, 0);
        String slotTime = (String) slotTable.getValueAt(rows, 1);
          LabPatientWorkRequest request = new LabPatientWorkRequest();
      request.setPatient(account.getEmployee().getName());
      request.setSender(account);
      request.setLabTestType(serviceComboBox.getSelectedItem().toString());
      request.setSlotDate(slotDate);
      request.setSlotTime(slotTime);
             for (Network network : business.getNetworkList()){
        for (Enterprise enterpriseCheck : network.getEnterpriseDirectory().getEnterpriseList()){
            if(enterpriseCheck.getName().equals(labComboBox.getSelectedItem().toString())){
                System.out.println("enerprise="+enterpriseCheck);
                LabEnterprise e = (LabEnterprise) enterpriseCheck;
                  Map<String,String> slots = e.getTimeSlot();
                  slots.put(slotDate+","+slotTime, "true");
                  e.setTimeSlot(slots);
                  
             //  for(Organization organization : enterpriseCheck.getOrganizationDirectory().getOrganizationList()){
                 for (UserAccount ua : e.getUserAccountDirectory().getUserAccountList()) {
                     System.out.println("ua="+ua);
                   if(ua.getRole().toString().equals("LabAdmin")){
                       System.out.println("ua="+ua.getRole());
                      ua.getLabPatientWorkQueue().addLabPatientRequest(request);
                   }
                 }
              // }
            }
        }
      }
                 
                  JOptionPane.showMessageDialog(null,"Booked Lab appointment successfully!", "Warning", JOptionPane.WARNING_MESSAGE); 
                 LabEnterprise labEnterpise = null;
            for (Network network : business.getNetworkList()){
        for (Enterprise enterpriseCheck : network.getEnterpriseDirectory().getEnterpriseList()){
            if(enterpriseCheck.getName().equals(labComboBox.getSelectedItem().toString())){
                labEnterpise = (LabEnterprise) enterpriseCheck;
            }
        }   
            }
                  populateSlots(labEnterpise);
    }//GEN-LAST:event_btnBookActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
              if(labComboBox.getSelectedItem().equals("")){
         JOptionPane.showMessageDialog(null, "Please select a Laboratory to check slots and services!", "Warning", JOptionPane.WARNING_MESSAGE);       
                  return;
        }
              LabEnterprise labEnterpise = null;
            for (Network network : business.getNetworkList()){
        for (Enterprise enterpriseCheck : network.getEnterpriseDirectory().getEnterpriseList()){
            if(enterpriseCheck.getName().equals(labComboBox.getSelectedItem().toString())){
                labEnterpise = (LabEnterprise) enterpriseCheck;
            }
        }   
            }
            if(labEnterpise!=null){
        populateServices(labEnterpise);
        populateSlots(labEnterpise);
            }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBook;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<String> labComboBox;
    private javax.swing.JComboBox<String> serviceComboBox;
    private javax.swing.JTable slotTable;
    // End of variables declaration//GEN-END:variables
}
