/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.EcoSystem;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;
import userinterface.PatientRole.CreatePatientJPanel;
import userinterface.PatientRole.ViewPatientJPanel;

/**
 *
 * @author sayu
 */
public class ManagePateintJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagePateintJPanel
     */
    JPanel userProcessContainer;
    EcoSystem ecosystem;
     UserAccount account;
   public ManagePateintJPanel(JPanel userProcessContainer, EcoSystem ecosystem) {
          initComponents();
          this.userProcessContainer=userProcessContainer;
        this.ecosystem=ecosystem;
        populatePatientTable();
    }
 public void populatePatientTable(){
        DefaultTableModel model = (DefaultTableModel)patientTable.getModel();
        model.setRowCount(0);
        List<Patient> vaccinetestList = ecosystem.getPatientDirectory().getpatientlist();
        for(Patient tester: vaccinetestList){
            Object row[] = new Object[4];
                 row[0] = tester.getId();
                 row[1] = tester;
                 row[2] = tester.getAllergy();
                 row[3] = tester.getAge();        
                 
            model.addRow(row);                    
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        btnCreatePateint = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnchart = new javax.swing.JButton();

        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient ID", "Name", "Allergy", "Age"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(patientTable);

        btnCreatePateint.setText("Create Patient");
        btnCreatePateint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePateintActionPerformed(evt);
            }
        });

        jButton1.setText("View Patient");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnchart.setText("chart");
        btnchart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnchartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(btnCreatePateint)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(btnchart))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addGap(45, 45, 45)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreatePateint)
                    .addComponent(jButton1)
                    .addComponent(btnchart))
                .addContainerGap(67, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
          userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCreatePateintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePateintActionPerformed
        // TODO add your handling code here:
        CreatePatientJPanel CreatePatientJPanel=new CreatePatientJPanel(userProcessContainer,account, ecosystem);
        userProcessContainer.add("CreatePatientJPanel",CreatePatientJPanel);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnCreatePateintActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         int selectedRow = patientTable.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a patient to view details!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Patient tester= (Patient)patientTable.getValueAt(selectedRow, 1);
        ViewPatientJPanel viewPatientJPanel = new ViewPatientJPanel(userProcessContainer, ecosystem,tester);
        userProcessContainer.add("viewPatientJPanel", viewPatientJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnchartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnchartActionPerformed
        // TODO add your handling code here:
        // int age1=tester.getAge();
        //  int selectedRow=patientTable.getSelectedRow();
        //  Patient pa=(Patient)patientTable.getValueAt(selectedRow, 1);
        int countA = 0;
        int countB=0;
        int countC=0;
        int countD=0;
        for(Patient patient : ecosystem.getPatientDirectory().getpatientlist()){
            if(patient.getAge() <= 25){
                ++countA;
            }
            else if(patient.getAge()>=26 && patient.getAge()<=35)
            {
                ++countB;
            }
            else if(patient.getAge()>=36 && patient.getAge()<=45)
            {
                ++countC;
            }
            else if(patient.getAge()>=46 && patient.getAge()<=100)
            {
                ++countD;
            }
        }
       
        DefaultPieDataset piedataset= new DefaultPieDataset();
        piedataset.setValue("Below 26", countA);
        piedataset.setValue("from 26 to 35",countB );
        piedataset.setValue("from 36 to 45",countC);
        piedataset.setValue("from 46 to 100",countD);
        JFreeChart chart=ChartFactory.createPieChart("Pie Chart", piedataset, true, true, true);
        PiePlot p=(PiePlot)chart.getPlot();
        ChartFrame frame=new ChartFrame("Pie Chart", chart);
        frame.setVisible(true);
        frame.setSize(450,500);
    }//GEN-LAST:event_btnchartActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreatePateint;
    private javax.swing.JButton btnchart;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable patientTable;
    // End of variables declaration//GEN-END:variables
}
